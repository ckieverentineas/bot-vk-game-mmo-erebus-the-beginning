import { answerTimeLimit, timer_text } from "..";
import prisma from "../module/prisma";
import { Context, Keyboard, KeyboardBuilder } from "vk-io";
import { Logger, Send_Message_Universal, /*Sleep*/ } from "../fab/helper";
import { Printer_Person_Class, Selector_Person_Class } from "../datacenter/person";
import { smile_list } from "../datacenter/icon_library";
import { Printer_Person_Stat_Info } from "../datacenter/character";
import { dialog_engine, DialogElement } from "../datacenter/dialog";
import { User } from "@prisma/client";
import { Printer_Blueprint, Selector_Blueprint_By_System_Name } from "../datacenter/blueprint";
import { Randomizer_Float } from "../fab/random";

export async function User_Register(context: Context) {
    const account_temp = { name: null, class: 1 }
    //—Å–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É
	const answer = await context.question(`üöÄ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–Ω–æ–≥–æ–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫—É—é –æ–Ω–ª–∞–π–Ω –∏–≥—Ä—É "–≠—Ä–µ–±—É—Å: –ù–∞—á–∞–ª–æ"!\n–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Å–≤–æ—é –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å—Å—è –≤ –∑–∞—Ö–≤–∞—Ç—ã–≤–∞—é—â–µ–µ –∫–æ—Å–º–∏—á–µ—Å–∫–æ–µ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏–µ, –≥–¥–µ –°–ò–°–¢–ï–ú–ê –≤—ã–Ω—É–¥–∏—Ç –≤–∞—Å —Å—Ç–∞—Ç—å —á–ª–µ–Ω–æ–º –º–∞—Ç–µ—Ä–∏–Ω—Å–∫–æ–≥–æ –∫–æ—Ä–∞–±–ª—è "–≠—Ä–µ–±—É—Å"?`,
        {	
            keyboard: Keyboard.builder()
            .textButton({ label: '‚Ä¢	–î–∞, —è –≥–æ—Ç–æ–≤(–∞) –∫ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏—è–º!', payload: { command: 'access' }, color: 'positive' }).row()
            .textButton({ label: '‚Ä¢	–ù–µ—Ç, —è –ø–µ—Ä–µ–¥—É–º–∞–ª(–∞).', payload: { command: 'denied' }, color: 'negative' }).oneTime(),
            answerTimeLimit
        }
    );
    if (answer.isTimeout) { return await context.send(`‚è∞ –í—Ä–µ–º—è –≤—ã—à–ª–æ, –º–∞–ª–µ—Ü! –¢—ã –Ω–µ —É—Å–ø–µ–ª –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —Å–æ–≥–ª–∞—Å–∏–µ, –∏ —Ç–µ–ø–µ—Ä—å —Ç—ã —Ç–æ–∂–µ –≤ –Ω–∞—à–µ–º —Å–ø–∏—Å–∫–µ. –ü–æ—Ä–∞ –ø—Ä–æ—â–∞—Ç—å—Å—è!`); }
    if (answer.payload.command != 'access') {
        return await context.send('üòî –ü–æ–Ω–∏–º–∞—é, –∫–æ—Å–º–æ—Å –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É–≥–∞—é—â–∏–º –º–µ—Å—Ç–æ–º. –ï—Å–ª–∏ —Ç—ã –∫–æ–≥–¥–∞-–Ω–∏–±—É–¥—å —Ä–µ—à–∏—à—å—Å—è –Ω–∞ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏–µ, –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ "–ù–∞—á–∞—Ç—å", –∏ —è –±—É–¥—É –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –ø–æ–º–æ—á—å —Ç–µ–±–µ!');
    }
    // –≤—ã–≤–æ–¥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–º
    await context.send(`${await Printer_Person_Stat_Info()}`)
    // –≤—ã–±–æ—Ä –∫–ª–∞—Å—Å–∞
    let person_show = true
    while (person_show) {
        const visit = await context.question(`üî• –û—Ç–ª–∏—á–Ω–æ! –î–∞–≤–∞–π —Å–æ–∑–¥–∞–¥–∏–º —Ç–≤–æ–µ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞!\n –î–∞–≤–∞–π –æ–ø—Ä–µ–¥–µ–ª–∏–º—Å—è, –∫—Ç–æ —Ç—ã, —Å–µ–π—á–∞—Å –≤—ã–±—Ä–∞–Ω –∫–ª–∞—Å—Å [${(await Selector_Person_Class(account_temp.class))?.name}]:\n\n${await Printer_Person_Class(account_temp.class)}`,
            { 	
                keyboard: Keyboard.builder()
                .textButton({ label: `${smile_list['captain'].ico} –ö–∞–ø–∏—Ç–∞–Ω`, payload: { command: 1 }, color: 'positive' }).row()
                .textButton({ label: `${smile_list['explorer'].ico} –ò—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å`, payload: { command: 2 }, color: 'positive' }).row()
                .textButton({ label: `${smile_list['warrior'].ico} –í–æ–∏–Ω`, payload: { command: 3 }, color: 'positive' }).row()
                .textButton({ label: `${smile_list['pilot'].ico} –ü–∏–ª–æ—Ç`, payload: { command: 4 }, color: 'positive' }).row()
                .textButton({ label: `${smile_list['engineer'].ico} –ò–Ω–∂–µ–Ω–µ—Ä`, payload: { command: 5 }, color: 'negative' }).row()
                .textButton({ label: `‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å`, payload: { command: 'success' }, color: 'negative' }).row()
                .oneTime().inline(),
                answerTimeLimit
            }
        );
        if (visit.isTimeout) { return await context.send(`‚è∞ –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∏—Å—Ç–µ–∫–ª–æ!`) }
        if (visit.payload.command == 'success') {
            person_show = false
        } else {
            account_temp.class = Number(visit.payload.command)
        }
    }
    while (!account_temp.name) {
        const name_in = await context.question( `${smile_list['attach'].ico} –í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –Ω–∏–∫–Ω–µ–π–º –¥–æ 32 —Å–∏–º–≤–æ–ª–æ–≤`, timer_text)
        if (name_in.isTimeout) { return await context.send(`‚è∞ –í—Ä–µ–º—è –≤—ã—à–ª–æ, –º–∞–ª–µ—Ü! –¢—ã –Ω–µ —É—Å–ø–µ–ª –≤–≤–µ—Å—Ç–∏ –∏–º—è, –∏ —Ç–µ–ø–µ—Ä—å —É –Ω–∞—Å –¥–ª—è —Ç–µ–±—è –ø–ª–æ—Ö–∏–µ –Ω–æ–≤–æ—Å—Ç–∏!`) }
        if (name_in.text.length <= 64) {
            account_temp.name = name_in.text
            if (name_in.text.length > 32) { await context.send(`‚ö† –¢–≤–æ–∏ –§–ò–û –Ω–µ –≤–ª–µ–∑–∞—é—Ç –≤ –±–ª–∞–Ω–∫ (32 —Å–∏–º–≤–æ–ª–∞)! –ú–æ–∂–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –±–ª–∞–Ω–∫, –Ω–æ –∑–∞ –∫–∞–∂–¥—ã–π –ª–∏—à–Ω–∏–π —Å–∏–º–≤–æ–ª –ø—Ä–∏–¥–µ—Ç—Å—è –æ—Ç–¥–∞—Ç—å 1‚Ç™.`) }
        } else { await context.send(`‚õî –¢–≤–æ–∏ –§–ò–û –Ω–µ –≤–ª–µ–∑–∞—é—Ç –≤ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –±–ª–∞–Ω–∫ (64 —Å–∏–º–≤–æ–ª–∞), –∏ –≤–æ–æ–±—â–µ, —ç—Ç–æ –ø–æ–¥ –∑–∞–ø—Ä–µ—Ç–æ–º –ø–æ –∑–∞–∫–æ–Ω—É! –í—ã–ø–ª–∞—Ç–∏ —à—Ç—Ä–∞—Ñ –≤ 30‚Ç™, –∏–ª–∏ –ª—é–¥–∏ –≤ —á–µ—Ä–Ω–æ–º –±—ã—Å—Ç—Ä–æ —Ä–∞–∑–±–µ—Ä—É—Ç—Å—è —Å —Ç–æ–±–æ–π.`) }
    }
    const class_sel = await Selector_Person_Class(account_temp.class)
    if (!class_sel) { return }
    const account = await prisma.user.create({ data: { idvk: context.senderId, name: account_temp.name } })
    const person = await prisma.person.create({ data: 
        { 
            id_user: account.id, 
            idvk: context.senderId,
            name:class_sel.name,
            strength: class_sel.strength,
            endurance: class_sel.endurance,
            endurance_current: class_sel.endurance,
            health: class_sel.health,
            health_current: class_sel.health,
            erudition: class_sel.erudition,
            charisma: class_sel.charisma,
            synchronization: class_sel.synchronization,
            karma: class_sel.karma,
            intuition: class_sel.intuition,
            psyche: class_sel.psyche,
            stealth: class_sel.stealth,
        }
    })
    await Logger(`(user registation) - success create account and person by @${person.id_user}`)
    
    //await Send_Message_Universal(chat_id, `‚Åâ@id${save.idvk}(${save.name}) –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç —Å–≤–æ–π –±–∏–∑–Ω–µ—Å –ø–æ –∫–æ–Ω—Ç—Ä–∞–∫—Ç—É UID: ${save.id}!`)
    await Send_Message_Universal(context.senderId, `‚úÖ –î–ª—è –Ω–æ—Ä–º–∞–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç—ã —Ç–µ–±–µ –Ω—É–∂–Ω–æ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –í–ö –∏–ª–∏ –∫–æ–º–ø.\nüí° –ö–æ–≥–¥–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –Ω–µ—Ç, –Ω–∞–ø–∏—à–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É [–∫–ª–∞–≤–∞] –±–µ–∑ –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã—Ö —Å–∫–æ–±–æ—á–µ–∫.`, new KeyboardBuilder().callbackButton({ label: `${smile_list.config.ico} –í –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏—è!`, payload: { command: 'dialog_engine', id_event: '0' }, color: 'secondary' }).row()
    .oneTime().inline())
    //await User_Menu_Show(context, save)
}

export async function Dialog_Engine(context: Context, user: User) {
    const id_dialog: string = context.eventPayload.id_event
    const dialog: DialogElement = dialog_engine[`${id_dialog}`]
    const config: { [event: string]: (context: Context, user: User) => Promise<string> } = {
        'event_generate_first_visit_planet': Event_Generate_First_Visit_Planet,
        'event_destruct_escape_pod': Event_Destruct_Escape_Pod,
        
    }
    if (dialog.event) {
        dialog.text += await config[dialog.event](context, user)
    }
    await Send_Message_Universal(context.peerId, dialog.text, dialog.keyboard, dialog.image)
}

async function Event_Generate_First_Visit_Planet(context: Context, user: User) {
    let event_logger = ''
    const mulmin = 5
    const mulmax = 3
    const planet_check = await prisma.planet.findFirst({ where: { id_user: user.id } })
    if (planet_check) { return '' }
    const planet_init = await prisma.planet.create({ data: { 
        id_user: user.id, name: "–ù–æ–≤—ã–π –≠–¥–µ–º", 
        coal: await Randomizer_Float(1000000*mulmin, 1000000*mulmin*mulmax), 
        //gas: await Randomizer_Float(50000*mulmin, 50000*mulmin*mulmax), 
        //oil: await Randomizer_Float(25000*mulmin, 25000*mulmin*mulmax), 
        //uranium: await Randomizer_Float(1000*mulmin, 1000*mulmin*mulmax),
        iron_ore: await Randomizer_Float(1000000*mulmin, 1000000*mulmin*mulmax),
        gold_ore: await Randomizer_Float(1000000*mulmin, 1000000*mulmin*mulmax),
        artefact: Math.floor(await Randomizer_Float(100*mulmin, 100*mulmin*mulmax)),
        //crystal: Math.floor(await Randomizer_Float(1, 25)),
    } })
    await Logger(`(generate_first_visit_planet succes) - got planet for research ~ by @${context.peerId}`)
    event_logger = `\n\n${smile_list.planet.ico} –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –Ω–æ–≤–∞—è –ø–ª–∞–Ω–µ—Ç–∞: ${planet_init.name}\n\n`
    return event_logger
}
async function Event_Destruct_Escape_Pod(context: Context, user: User) {
    // –Ω–∞—á–∏—Å–ª—è–µ–º —Ä–µ—Å—É—Ä—Å—ã —Å —Ä–∞–∑–±–æ—Ä–∞ —Å–ø–∞—Å–∞—Ç–µ–ª—å–Ω–æ–π –∫–∞–ø—Å—É–ª—ã
    const iron_default = 500
    const gold_default = 5000
    const energy_default = 10000
    const ammo_turret_default = 1000
    let event_logger = `–ü–æ–ª—É—á–µ–Ω—ã –∏ –Ω–∞–π–¥–µ–Ω—ã —Å–ª–µ–¥—É—é—â–∏–µ –ø—Ä–µ–¥–º–µ—Ç—ã:\n\n`
    let resource_check = await prisma.resource.findFirst({ where: { id_user: user.id } })
    if (!resource_check) {
        resource_check = await prisma.resource.create({ data: { id_user: user.id, gold: gold_default, iron: iron_default, energy: energy_default } })
        if (!resource_check) { return `${event_logger}\n\n ${smile_list.warn.ico} –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ —Ä–µ—Å—É—Ä—Å–æ–≤` }
        event_logger += `${smile_list.gold.ico} –®–µ–∫–µ–ª—å: —Ö${gold_default}\n${smile_list.iron.ico} –ñ–µ–ª–µ–∑–æ: —Ö${iron_default}\n${smile_list.energy.ico} –≠–Ω–µ—Ä–≥–∏—è: —Ö${energy_default}\n`
    }
    let ammo_check = await prisma.ammo.findFirst({ where: { id_user: user.id } })
    if (!ammo_check) {
        ammo_check = await prisma.ammo.create({ data: { id_user: user.id, ammo_turret: ammo_turret_default } })
        if (!ammo_check) { return `${event_logger}\n\n ${smile_list.warn.ico} –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ –ø–∞—Ç—Ä–æ–Ω–æ–≤` }
        event_logger += `${smile_list.ammo.ico} –ü–∞—Ç—Ä–æ–Ω—ã –¥–ª—è –¢—É—Ä–µ–ª–∏: —Ö${ammo_turret_default}\n`
    }
    // –¥–æ–±–∞–≤–ª—è–µ–º –∏–≥—Ä–æ–∫—É —á–µ—Ä—Ç–µ–∂–∏ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–∞
    const mine = await Selector_Blueprint_By_System_Name('mine')
    if (!mine) { return `${event_logger}\n\n ${smile_list.warn.ico} —á–µ—Ä—Ç–µ–∂ [mine] –Ω–µ –±—ã–ª –Ω–∞–π–¥–µ–Ω` }
    const bp_mine_add = await prisma.blueprint.create({ data: { id_user: user.id, system_name: mine.system_name, type: mine.type, lvl: mine.lvl } })
    if (!bp_mine_add) { return `${event_logger}\n\n ${smile_list.warn.ico} —á–µ—Ä—Ç–µ–∂ [mine] –Ω–µ –±—ã–ª –¥–æ–±–∞–≤–ª–µ–Ω` }
    event_logger += await Printer_Blueprint('mine')

    const fabricator = await Selector_Blueprint_By_System_Name('fabricator')
    if (!fabricator) { return `${event_logger}\n\n ${smile_list.warn.ico} —á–µ—Ä—Ç–µ–∂ [fabricator] –Ω–µ –±—ã–ª –Ω–∞–π–¥–µ–Ω` }
    const bp_fabricator_add = await prisma.blueprint.create({ data: { id_user: user.id, system_name: fabricator.system_name, type: fabricator.type, lvl: fabricator.lvl } })
    if (!bp_fabricator_add) { return `${event_logger}\n\n ${smile_list.warn.ico} —á–µ—Ä—Ç–µ–∂ [fabricator] –Ω–µ –±—ã–ª –¥–æ–±–∞–≤–ª–µ–Ω` }
    event_logger += await Printer_Blueprint('fabricator')

    const base = await Selector_Blueprint_By_System_Name('base')
    if (!base) { return `${event_logger}\n\n ${smile_list.warn.ico} —á–µ—Ä—Ç–µ–∂ [base] –Ω–µ –±—ã–ª –Ω–∞–π–¥–µ–Ω` }
    const bp_base_add = await prisma.blueprint.create({ data: { id_user: user.id, system_name: base.system_name, type: base.type, lvl: base.lvl } })
    if (!bp_base_add) { return `${event_logger}\n\n ${smile_list.warn.ico} —á–µ—Ä—Ç–µ–∂ [base] –Ω–µ –±—ã–ª –¥–æ–±–∞–≤–ª–µ–Ω` }
    event_logger += await Printer_Blueprint('base')

    const turret = await Selector_Blueprint_By_System_Name('turret')
    if (!turret) { return `${event_logger}\n\n ${smile_list.warn.ico} —á–µ—Ä—Ç–µ–∂ [turret] –Ω–µ –±—ã–ª –Ω–∞–π–¥–µ–Ω` }
    const bp_turret_add = await prisma.blueprint.create({ data: { id_user: user.id, system_name: turret.system_name, type: turret.type, lvl: turret.lvl } })
    if (!bp_turret_add) { return `${event_logger}\n\n ${smile_list.warn.ico} —á–µ—Ä—Ç–µ–∂ [turret] –Ω–µ –±—ã–ª –¥–æ–±–∞–≤–ª–µ–Ω` }
    event_logger += await Printer_Blueprint('turret')

    const cloning_station = await Selector_Blueprint_By_System_Name('cloning_station')
    if (!cloning_station) { return `${event_logger}\n\n ${smile_list.warn.ico} —á–µ—Ä—Ç–µ–∂ [cloning_station] –Ω–µ –±—ã–ª –Ω–∞–π–¥–µ–Ω` }
    const bp_cloning_station_add = await prisma.blueprint.create({ data: { id_user: user.id, system_name: cloning_station.system_name, type: cloning_station.type, lvl: cloning_station.lvl } })
    if (!bp_cloning_station_add) { return `${event_logger}\n\n ${smile_list.warn.ico} —á–µ—Ä—Ç–µ–∂ [cloning_station] –Ω–µ –±—ã–ª –¥–æ–±–∞–≤–ª–µ–Ω` }
    event_logger += await Printer_Blueprint('cloning_station')

    await Logger(`(destroyed escaped pod succes) - got resources and blueprints ~ by @${context.peerId}`)
    return event_logger
}

