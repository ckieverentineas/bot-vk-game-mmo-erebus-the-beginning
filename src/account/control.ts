import { Corporation, Planet, Resource, User } from "@prisma/client";
import { Context, KeyboardBuilder } from "vk-io";
import prisma from "../module/prisma";
import { Send_Message_Universal } from "../fab/helper";
import { smile_list } from "../datacenter/icon_library";

async function User_Info(user: User) {
	const corp: Corporation | null = await prisma.corporation.findFirst({ where: { id: user.id_corporation } })
	const planet: Planet | null = await prisma.planet.findFirst({ where: { id_user: user.id } })
	const resource: Resource | null = await prisma.resource.findFirst({ where: { id_user: user.id } })
    let event_logger = `${smile_list.message.ico} –ò–≥—Ä–æ–∫ [${smile_list.person.ico} ${user.name}] –≤—ã —Å–µ–π—á–∞—Å –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –Ω–∞ –ø–ª–∞–Ω–µ—Ç–µ [${smile_list.planet.ico} ${planet?.name}]\n\n${smile_list.card.ico} UID –∫–∞—Ä—Ç—ã: ${user.id}\nüåê –ö–æ—Ä–ø–æ—Ä–∞—Ü–∏—è: ${user.id_corporation == 0? '–ù–µ –≤ –∫–æ—Ä–ø–æ—Ä–∞—Ü–∏–∏' : corp?.name}\n${smile_list.gold.ico} –®–µ–∫–µ–ª–∏: ${resource?.gold.toFixed(2)}\n${smile_list.iron.ico} –ñ–µ–ª–µ–∑–æ: ${resource?.iron.toFixed(2)}\n${smile_list.energy.ico} –≠–Ω–µ—Ä–≥–∏—è: ${resource?.energy.toFixed(2)}\n`
	const keyboard = new KeyboardBuilder()
	keyboard.callbackButton({ label: `${smile_list.person.ico} –ü–µ—Ä—Å–æ–Ω–∞–∂`, payload: { command: 'person_menu' }, color: 'secondary' })
	.callbackButton({ label: `${smile_list.corporation.ico} –ö–æ—Ä–ø–æ—Ä–∞—Ü–∏—è`, payload: { command: 'main_menu_corporation' }, color: 'secondary' }).row()
	.callbackButton({ label: `${smile_list.inventory.ico} –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å`, payload: { command: 'planet_control_multi' }, color: 'secondary' })
	.callbackButton({ label: `${smile_list.storehouse.ico} –°–∫–ª–∞–¥`, payload: { command: 'main_menu_corporation' }, color: 'secondary' }).row()
	.callbackButton({ label: `${smile_list.build.ico} –ó–¥–∞–Ω–∏—è`, payload: { command: 'planet_control_multi' }, color: 'secondary' })
	.callbackButton({ label: `${smile_list.persons.ico} –ö–æ–º–∞–Ω–¥–∞`, payload: { command: 'planet_control_multi' }, color: 'secondary' }).row()
	.callbackButton({ label: '‚ùå', payload: { command: 'main_menu_close' }, color: 'secondary' }).row()
	.callbackButton({ label: `${smile_list.message.ico} –í —á–∞—Ç`, payload: { command: 'main_menu_corporation' }, color: 'secondary' })
	.urlButton({ label: 'üçª –û–± –∏–≥—Ä–µ', url: 'https://vk.com/@capital_galaxy-dobro-pozhalovat-v-mnogopolzovatelskuu-onlain-igru-s-ekonomi' }).row()
	.callbackButton({ label: `${smile_list.research.ico} –ò—Å—Å–ª–µ–¥–æ–≤–∞—Ç—å`, payload: { command: 'main_menu_corporation' }, color: 'secondary' }).row().inline().oneTime() 
	return [keyboard, event_logger]
}
export async function User_Menu_Show(context: Context, user: User) {
	const [keyboard, event_logger] = await User_Info(user)
	if (!keyboard || typeof keyboard === 'string') { return }
	await Send_Message_Universal(context.senderId, `${event_logger}`, keyboard)
	/*await context.send(`‚åõ –ü–æ–≥–æ–¥–∞ —Å–µ–≥–æ–¥–Ω—è —Å–æ–ª–Ω–µ—á–Ω–∞—è, –Ω–æ –≤—ã —Ç–µ–ø–µ—Ä—å –Ω–µ –Ω–∞ –∑–∞–≤–æ–¥–µ, –≤–ª–∞–¥–µ—Ç–µ –∑–∞–≤–æ–¥–æ–º.`,
		{ 	
			keyboard: Keyboard.builder()
			.callbackButton({ label: '–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –±–∏–∑–Ω–µ—Å', payload: { command: 'main_menu', security: `${user.idvk}${user.name}` }, color: 'positive' }).oneTime().inline()
		}
	);*/
}

export async function Main_Menu(context: Context, user: User) {
	const [keyboard, event_logger] = await User_Info(user)
	if (!keyboard || typeof keyboard === 'string') { return }
	await Send_Message_Universal(context.peerId, `${event_logger}`, keyboard)
    //await vk.api.messages.edit({peer_id: context.peerId, conversation_message_id: context.conversationMessageId, message: `${event_logger}`, keyboard: keyboard/*, attachment: attached.toString()*/ })
}
export async function Main_Menu_Close(context: Context, user: User) {
	const keyboard = new KeyboardBuilder()
	keyboard.textButton({ label: '–ö–õ–ê–í–ê', payload: { command: 'planet_control', stat: "health"  }, color: 'secondary' }).row().inline().oneTime() 
	await Send_Message_Universal(context.peerId, `‚ùÑ –°–µ—Å—Å–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞, ${user.name}, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –Ω–æ–≤—É—é, –Ω–∞–ø–∏—à–∏—Ç–µ [–∫–ª–∞–≤–∞] –±–µ–∑ –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã—Ö —Å–∫–æ–±–æ—á–µ–∫`, keyboard)
	//await vk.api.messages.edit({peer_id: context.peerId, conversation_message_id: context.conversationMessageId, message: `‚ùÑ –°–µ—Å—Å–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞, ${user.name}, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –Ω–æ–≤—É—é, –Ω–∞–ø–∏—à–∏—Ç–µ [–∫–ª–∞–≤–∞] –±–µ–∑ –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã—Ö —Å–∫–æ–±–æ—á–µ–∫`, keyboard: keyboard/*, attachment: attached.toString()*/ })
}