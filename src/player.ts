import { HearManager } from "@vk-io/hear";
import { chat_id, root, vk } from "./index";
import { IQuestionMessageContext } from "vk-io-question";
import prisma from "./module/prisma";
import { Corporation, User } from "@prisma/client";


export function registerUserRoutes(hearManager: HearManager<IQuestionMessageContext>): void {
    hearManager.hear(/!–µ–Ω–æ—Ç–∏–∫/, async (context: any) => {
        if (context.senderId == root[0]) {
            await context.sendDocuments({ value: `./prisma/capital_galactic.db`, filename: `capital_galactic.db` }, { message: 'üí° –û—Ç–∫—Ä—ã–≤–∞—Ç—å –Ω–∞ —Å–∞–π—Ç–µ: https://sqliteonline.com/' } );
            await vk.api.messages.send({
                peer_id: Number(root[0]),
                random_id: 0,
                message: `‚Äº @id${context.senderId}(Admin) –¥–µ–ª–∞–µ—Ç –±–µ–∫–∞–ø –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö capital_galactic.db.`
            })
        }
    })
    hearManager.hear(/!–æ—Å–º–æ—Ç—Ä–µ—Ç—å|!–û—Å–º–æ—Ç—Ä–µ—Ç—å/gm, async (context: any) => {
        if (context.forwards[0]?.senderId || context.replyMessage?.senderId) {
            const target = context.forwards[0]?.senderId || context.replyMessage?.senderId
            const user = await prisma.user.findFirst({ where: { idvk: target } })
            if (!user) { return }
            /*const counter_builder = await prisma.builder.count({ where: { id_user: user.id } })
            const counter_planet = await prisma.planet.count({ where: { id_user: user.id } })
            if (user) {
                const corp: Corporation | null = await prisma.corporation.findFirst({ where: { id: user.id_corporation } })
                //await context.send(`üí¨ –ü—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã–π —à–ø–∏–æ–Ω–∞–∂ –ø–æ–∫–∞–∑–∞–ª, —á—Ç–æ —ç—Ç–æ –±–∏–∑–Ω–µ—Å, ${user.name}:\nüåê –ö–æ—Ä–ø–æ—Ä–∞—Ü–∏—è: ${user.id_corporation == 0? '–ù–µ –≤ –∫–æ—Ä–ø–æ—Ä–∞—Ü–∏–∏' : corp?.name}\nüìà –£—Ä–æ–≤–µ–Ω—å: ${user.lvl}\nüí∞ –®–µ–∫–µ–ª–∏: ${user.gold.toFixed(2)}\n‚ö° –≠–Ω–µ—Ä–≥–∏—è: ${user.energy.toFixed(2)}\n${icotransl_list['iron'].smile} –ñ–µ–ª–µ–∑–æ: ${user.iron.toFixed(2)}\n‚öí –ó–¥–∞–Ω–∏–π: ${counter_builder}\nüåé –ü–ª–∞–Ω–µ—Ç: ${counter_planet}`)
            }*/
        }
        //console.log(context.forwards[0].senderId)
    })
    hearManager.hear(/!–ø–æ–º–æ—â—å|!–ü–æ–º–æ—â—å/gm, async (context: any) => {
        await context.send(`üí¨ –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –¥–æ—Å—Ç—É–ø–Ω—ã –∫–æ–º–∞–Ω–¥—ã:\n~ [!–æ—Å–º–æ—Ç—Ä–µ—Ç—å] -> –ø–∏—à–µ—Ç—Å—è –ø—Ä–∏ –ø–µ—Ä–µ—Å—ã–ª–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø–æ–∑–≤–æ–ª—è–µ—Ç —á–µ—Ä–µ–∑ –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã–π —à–ø–∏–æ–Ω–∞–∂ —É–∑–Ω–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–µ\n~ [!–ø–µ—Ä–µ–¥–∞—Ç—å —Ö —à–µ–∫–µ–ª–µ–π] -> –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –±–µ—Å–µ–¥—ã, –ø–∏—à–µ—Ç—Å—è –ø—Ä–∏ –ø–µ—Ä–µ—Å—ã–ª–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø–æ–∑–≤–æ–ª—è–µ—Ç –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å –¥—Ä—É–≥–æ–º—É –∏–≥—Ä–æ–∫—É —à–µ–∫–µ–ª–∏, –≥–¥–µ —Ö - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —à–µ–∫–µ–ª–µ–π, —á—Ç–æ —Å–ø–∏—à—É—Ç—Å—è —Å –≤–∞—à–µ–≥–æ —Å—á–µ—Ç–∞\n~ [!—Å—Ç–∞—Ç–∞] -> –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–æ–ø-10 –∏–≥—Ä–æ–∫–æ–≤ –≤ —Ç–æ–ø–µ –ø–æ –¥–æ–±—ã—á–µ —ç–Ω–µ—Ä–≥–∏–∏\n~ [!–æ—Å–Ω–æ–≤–∞—Ç—å –∫–æ—Ä–ø–æ—Ä–∞—Ü–∏—é –ù–ê–ó–í–ê–ù–ò–ï] -> –ø–∏—à–µ—Ç–µ !–æ—Å–Ω–æ–≤–∞—Ç—å –∫–æ—Ä–ø–æ—Ä–∞—Ü–∏—é –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –µ–µ —Å–ª–µ–¥–æ–º\n~ [!–≤—Å—Ç—É–ø–∏—Ç—å] -> –ø–∏—à–µ—Ç—Å—è –ø—Ä–∏ –ø–µ—Ä–µ—Å—ã–ª–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø–æ–∑–≤–æ–ª—è–µ—Ç –≤—Å—Ç—É–ø–∏—Ç—å –≤ –∫–æ—Ä–ø–æ—Ä–∞—Ü–∏—é –¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è`)
        //console.log(context.forwards[0].senderId)
    })
    hearManager.hear(/!–±–∞–Ω/, async (context) => {
        if (context.isOutbox == false && root.includes(String(context.senderId)) && context.text) {
            const target: number = Number(context.text.replace(/[^0-9]/g,"")) || 0
            if (target > 0) {
                const user: User | null = await prisma.user.findFirst({ where: { idvk: target } })
                if (user) {
                    const login = await prisma.user.update({ where: { id: user.id }, data: { status: "banned" } })
                    await context.send(`OK`)
                    await vk.api.messages.send({ peer_id: chat_id, random_id: 0, message: `‚ò† –î–ª—è @id${login.idvk}(${login.name}) —É—á–µ—Ç–Ω–∞—è –∑–∞–ø–∏—Å—å –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!`})
                    await vk.api.messages.send({ peer_id: login.idvk, random_id: 0, message: `‚ò† @id${login.idvk}(${login.name}) —É—á–µ—Ç–Ω–∞—è –∑–∞–ø–∏—Å—å –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞! –û–±—Ä–∞—â–∞–π—Ç–µ—Å—å –≤ —Ç–µ—Ö –ø–æ–¥–¥–µ—Ä–∂–∫—É: https://vk.com/fermatex`})
                    console.log(`–î–ª—è @id${login.idvk}(${login.name}) —É—á–µ—Ç–Ω–∞—è –∑–∞–ø–∏—Å—å –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!`)
                } else {
                    await context.send(`@id${target}(–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è) –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç`)
                    console.log(`@id${target}(–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è) –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç`)
                }
            }
        }
    })
    hearManager.hear(/!—Ä–∞–∑–±–∞–Ω/, async (context) => {
        if (context.isOutbox == false && root.includes(String(context.senderId)) && context.text) {
            const target: number = Number(context.text.replace(/[^0-9]/g,"")) || 0
            if (target > 0) {
                const user: User | null = await prisma.user.findFirst({ where: { idvk: target } })
                if (user) {
                    const login = await prisma.user.update({ where: { id: user.id }, data: { status: "player" } })
                    await context.send(`OK`)
                    await vk.api.messages.send({ peer_id: chat_id, random_id: 0, message: `‚úÖ –î–ª—è @id${login.idvk}(${login.name}) —É—á–µ—Ç–Ω–∞—è –∑–∞–ø–∏—Å—å –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∞!`})
                    await vk.api.messages.send({ peer_id: login.idvk, random_id: 0, message: `‚úÖ @id${login.idvk}(${login.name}) —É—á–µ—Ç–Ω–∞—è –∑–∞–ø–∏—Å—å –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∞!`})
                    console.log(`–î–ª—è @id${login.idvk}(${login.name}) —É—á–µ—Ç–Ω–∞—è –∑–∞–ø–∏—Å—å –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!`)
                } else {
                    await context.send(`@id${target}(–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è) –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç`)
                    console.log(`@id${target}(–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è) –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç`)
                }
            }
        }
    })
    hearManager.hear(/!–æ—Å–Ω–æ–≤–∞—Ç—å –∫–æ—Ä–ø–æ—Ä–∞—Ü–∏—é/gm, async (context: any) => {
        const user: User | null = await prisma.user.findFirst({ where: { idvk: context.senderId } })
        if (user) {
            const corporation_check: Corporation | null = await prisma.corporation.findFirst({ where: { id: Number(user.id_corporation) } })
            if (corporation_check) {
                await context.send(`–í—ã —É–∂–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –∫–æ—Ä–ø–æ—Ä–∞—Ü–∏–∏ ${corporation_check.name}`)
                return
            } else {
                const name_corp = context.text.replace('–æ—Å–Ω–æ–≤–∞—Ç—å –∫–æ—Ä–ø–æ—Ä–∞—Ü–∏—é ', '')
                if (name_corp.length < 3 || name_corp.length >= 100 ) { await context.send(`–î–ª–∏–Ω–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–æ—Ä–ø–æ—Ä–∞—Ü–∏–∏ –Ω–µ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –º–µ–Ω—å—à–µ 3 —Å–∏–º–≤–æ–ª–æ–≤ –∏ –±–æ–ª—å—à–µ 100 —Å–∏–º–≤–æ–ª–æ–≤`); return }
                const name_check = await prisma.corporation.findFirst({ where: { name: name_corp } })
                if (name_check) { await context.send(`–ö–æ—Ä–ø–æ—Ä–∞—Ü–∏—è —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç`); return }
                const corp = await prisma.corporation.create({ data: { name: name_corp, id_user: user.id }})
                if (corp) {
                    await prisma.user.update({ where: { id: user.id }, data: { id_corporation: corp.id}})
                    console.log(`–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å –≤—ã—Ö–æ–¥–æ–º –Ω–∞ –º–∏—Ä–æ–≤—É—é –∞—Ä–µ–Ω—É –Ω–æ–≤–æ–π –∫–æ—Ä–ø–æ—Ä–∞—Ü–∏–∏: ${corp.name}`);
                    await context.send(`–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å –≤—ã—Ö–æ–¥–æ–º –Ω–∞ –º–∏—Ä–æ–≤—É—é –∞—Ä–µ–Ω—É –Ω–æ–≤–æ–π –∫–æ—Ä–ø–æ—Ä–∞—Ü–∏–∏: ${corp.name}`)
                    await vk.api.messages.send({ peer_id: chat_id, random_id: 0, message: `–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å –≤—ã—Ö–æ–¥–æ–º –Ω–∞ –º–∏—Ä–æ–≤—É—é –∞—Ä–µ–Ω—É –Ω–æ–≤–æ–π –∫–æ—Ä–ø–æ—Ä–∞—Ü–∏–∏: ${corp.name}` })
                }
            }
        }
    })
    hearManager.hear(/!–≤—Å—Ç—É–ø–∏—Ç—å|!–í—Å—Ç—É–ø–∏—Ç—å/gm, async (context: any) => {
        if ((context.forwards[0]?.senderId || context.replyMessage?.senderId) /*&& context.peerType == 'chat'*/) {
            let event_logger = ''
            const target = context.forwards[0]?.senderId || context.replyMessage?.senderId
            if (!target) { return }
            const user_from: User | null = await prisma.user.findFirst({ where: { idvk: context.senderId } })
            const user_to: User | null = await prisma.user.findFirst({ where: { idvk: target } })
            if ( !user_from || !user_to) { await context.send(`–í—ã –∏–ª–∏ –∏–≥—Ä–æ–∫ –Ω–µ –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!`); return }
            if ( user_from?.idvk == user_to?.idvk) { await context.send(`–ö —Å–∞–º–æ–º—É —Å–µ–±–µ –≤—Ç–æ—Ä–æ–π —Å–º—ã—Å–ª–∞ –≤—Å—Ç—É–ø–∞—Ç—å –Ω–µ—Ç!`); return }
            const corporation_check: Corporation | null = await prisma.corporation.findFirst({ where: { id: Number(user_from.id_corporation) } })
            if (corporation_check) {
                await context.send(`–í—ã —É–∂–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –∫–æ—Ä–ø–æ—Ä–∞—Ü–∏–∏ ${corporation_check.name}`)
                return
            } else {
                const corporation_check_to: Corporation | null = await prisma.corporation.findFirst({ where: { id: Number(user_to.id_corporation) } })
                if (corporation_check_to && await prisma.user.count({ where: { id_corporation: user_to.id_corporation} }) < corporation_check_to.member ) {
                    await prisma.$transaction([
                        prisma.user.update({ where: { id: user_from.id }, data: { id_corporation: user_to.id_corporation } }),
                        prisma.user.findFirst({ where: { id: corporation_check_to.id_user } })
                    ]).then(([user_change_corp, owner]) => {
                        if (user_change_corp) {
                            event_logger += `–í—ã –≤—Å—Ç—É–ø–∏–ª–∏ –≤ –∫–æ—Ä–ø–æ—Ä–∞—Ü–∏—é ${corporation_check_to.name}`
                            console.log(`${user_from.idvk} –≤—Å—Ç—É–ø–∏–ª –≤ –∫–æ—Ä–ø–æ—Ä–∞—Ü–∏—é ${corporation_check_to.name}`);
                            vk.api.messages.send({ peer_id: owner!.idvk, random_id: 0, message: `@id${user_from.idvk}(${user_from.name}) –≤—Å—Ç—É–ø–∞–µ—Ç –∫ –≤–∞–º –≤ –∫–æ—Ä–ø–æ—Ä–∞—Ü–∏—é!` })
                        }
                    })
                    .catch((error) => {
                        event_logger += `–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–∏ –≤ –∫–æ—Ä–ø–æ—Ä–∞—Ü–∏—é, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ`
                        console.error(`–û—à–∏–±–∫–∞: ${error.message}`);
                    });
                } else {
                    await context.send(`–í –∫–æ—Ä–ø–æ—Ä–∞—Ü–∏–∏ –Ω–µ—Ç –º–µ—Å—Ç–∞ –¥–ª—è –Ω–æ–≤—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏–ª–∏ –∏–≥—Ä–æ–∫ –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç –≤ –∫–æ—Ä–ø–æ—Ä–∞—Ü–∏–∏!`)
                }
            }
            await context.send(`${event_logger}`)
        }
    })
}