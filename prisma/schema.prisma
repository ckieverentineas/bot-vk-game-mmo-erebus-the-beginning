generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id             Int          @id @default(autoincrement())
  idvk           Int
  name           String
  status         String       @default("player")
  id_corporation Int          @default(0)
  crdate         DateTime     @default(now())
  update         DateTime     @default(now())
  Person Person[]
  Resource Resource[]
  Bulder         Builder[]
  Blueprint      Blueprint[]
  Ammo           Ammo[]
  Worker         Worker[]
  Trigger        Trigger[]
  Analyzer       Analyzer[]
  Research       Research[]
  Statistics     Statistics[]
}

model Person {
  id                Int          @id @default(autoincrement())
  idvk              Int
  name              String
  strength          Float
  endurance         Float
  endurance_current Float
  health            Float
  health_current    Float
  erudition         Float
  charisma          Float
  synchronization   Float
  karma             Float
  intuition         Float
  psyche            Float
  stealth           Float
  id_user    Int
  user       User     @relation(fields: [id_user], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model Resource {
  id            Int          @id @default(autoincrement())
  coal          Float        @default(0)
  iron_ore      Float        @default(0)
  iron          Float
  gold_ore      Float        @default(0)
  artefact      Float        @default(0)
  energy        Float
  gold          Float
  people        Int          @default(5)
  crystal       Int          @default(0)
  id_user    Int
  user       User     @relation(fields: [id_user], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model Blueprint {
  id         Int          @id @default(autoincrement())
  system_name       String
  lvl        Int
  type       String
  id_user    Int
  crdate     DateTime @default(now())
  update     DateTime @default(now())
  user       User     @relation(fields: [id_user], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model Ammo {
  id         Int          @id @default(autoincrement())
  ammo_turret Int
  id_user    Int
  user       User     @relation(fields: [id_user], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model Planet {
  id   Int    @id @default(autoincrement())
  name String
  coal          Float
  iron_ore      Float
  gold_ore      Float
  artefact      Float
  id_user   Int?
  crdate    DateTime @default(now())
  update    DateTime @default(now())
}

model Builder {
  id         Int      @id @default(autoincrement())
  name       String
  lvl        Int      @default(1)
  gold       Float    @default(0)
  iron       Float    @default(0)
  people     Int      @default(0)
  id_user    Int
  id_planet  Int?
  crdate     DateTime @default(now())
  update     DateTime @default(now())
  user       User     @relation(fields: [id_user], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model Corporation_Builder {
  id             Int         @id @default(autoincrement())
  name           String
  lvl            Int         @default(1)
  type           String
  income         Float       @default(1)
  cost           Float       @default(100)
  worker         Int         @default(1)
  id_corporation Int
  crdate         DateTime    @default(now())
  update         DateTime    @default(now())
  corporation    Corporation @relation(fields: [id_corporation], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model Worker {
  id         Int      @id @default(autoincrement())
  name       String
  lvl        Int      @default(1)
  xp         Float    @default(0)
  income     Float    @default(0)
  speed      Float    @default(1)
  salary     Float    @default(1)
  gold       Float    @default(0)
  reputation Float    @default(0)
  point      Int      @default(0)
  id_user    Int
  id_builder Int?
  id_planet  Int?
  crdate     DateTime @default(now())
  update     DateTime @default(now())
  user       User     @relation(fields: [id_user], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model Corporation {
  id                  Int                   @id @default(autoincrement())
  id_user             Int
  name                String
  lvl                 Int                   @default(1)
  xp                  Float                 @default(0)
  gold                Float                 @default(1750)
  energy              Float                 @default(1750)
  reputation          Float                 @default(0)
  member              Int                   @default(6)
  crdate              DateTime              @default(now())
  update              DateTime              @default(now())
  Corporation_Builder Corporation_Builder[]
}

model Trigger {
  id      Int      @id @default(autoincrement())
  name    String
  value   Boolean  @default(false)
  user    User     @relation(fields: [id_user], references: [id], onDelete: Cascade, onUpdate: Cascade)
  id_user Int
  crdate  DateTime @default(now())
  update  DateTime @default(now())
}

model Analyzer {
  id        Int      @id @default(autoincrement())
  energy    Float    @default(0)
  gold      Float    @default(0)
  gold_from Float    @default(0)
  gold_to   Float    @default(0)
  xp        Float    @default(0)
  point     Int      @default(0)
  user      User     @relation(fields: [id_user], references: [id], onDelete: Cascade, onUpdate: Cascade)
  id_user   Int
  crdate    DateTime @default(now())
}

model Research {
  id      Int      @id @default(autoincrement())
  name    String
  lvl     Int
  user    User     @relation(fields: [id_user], references: [id], onDelete: Cascade, onUpdate: Cascade)
  id_user Int
  crdate  DateTime @default(now())
  update  DateTime @default(now())
}

model Statistics {
  id      Int      @id @default(autoincrement())
  all     String
  day     String
  week    String
  month   String
  user    User     @relation(fields: [id_user], references: [id], onDelete: Cascade, onUpdate: Cascade)
  id_user Int
  crdate  DateTime @default(now())
  update  DateTime @default(now())
}

model Boss {
  id  Int      @id @default(autoincrement())
  id_post Int
  name String
  description String
  hp Float
  artefact Float
  crystal Float
  stat String @default("[]")
  defeat Boolean @default(false)
  crdate  DateTime @default(now())
  update  DateTime @default(now())
}